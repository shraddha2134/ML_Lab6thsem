import csv
import math

# Function to load the dataset from a CSV file
def load_dataset(filename):
    dataset = []
    with open(filename, 'r') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            if not row:
                continue
            dataset.append(row)
    return dataset

# Function to convert string columns to float
def str_column_to_float(dataset, column):
    for row in dataset:
        row[column] = float(row[column].strip())

# Function to calculate the Euclidean distance between two data points
def euclidean_distance(instance1, instance2, length):
    distance = 0
    for i in range(length):
        distance += pow((instance1[i] - instance2[i]), 2)
    return math.sqrt(distance)

# Function to find k nearest neighbors
def get_neighbors(train_set, test_instance, k):
    distances = []
    length = len(test_instance) - 1
    for train_instance in train_set:
        dist = euclidean_distance(test_instance, train_instance, length)
        distances.append((train_instance, dist))
    distances.sort(key=lambda x: x[1])
    neighbors = []
    for i in range(k):
        neighbors.append(distances[i][0])
    return neighbors

# Function to predict the class label for a test instance
def predict_class(neighbors):
    class_votes = {}
    for neighbor in neighbors:
        class_label = neighbor[-1]
        if class_label in class_votes:
            class_votes[class_label] += 1
        else:
            class_votes[class_label] = 1
    sorted_votes = sorted(class_votes.items(), key=lambda x: x[1], reverse=True)
    return sorted_votes[0][0]

# Function to evaluate the accuracy of predictions
def get_accuracy(test_set, predictions):
    correct = 0
    for i in range(len(test_set)):
        if test_set[i][-1] == predictions[i]:
            correct += 1
    return (correct / float(len(test_set))) * 100.0

# Load the dataset
dataset = load_dataset('iriss.csv')

# Convert string columns to float
for i in range(4):
    str_column_to_float(dataset, i)

# Split the dataset into training and testing sets
split_ratio = 0.7
train_size = int(len(dataset) * split_ratio)
train_set = dataset[:train_size]
test_set = dataset[train_size:]

# Make predictions
k = 3
predictions = []
for test_instance in test_set:
    neighbors = get_neighbors(train_set, test_instance, k)
    predicted_class = predict_class(neighbors)
    predictions.append(predicted_class)
    print('Expected:', test_instance[-1], 'Predicted:', predicted_class)

# Calculate accuracy
accuracy = get_accuracy(test_set, predictions)
print('Accuracy:', accuracy)
